name: üî∂ Sherlock (GitHub Models) - GR√ÅTIS

on:
    pull_request:
        types: [opened, edited, synchronize, reopened]

jobs:
    ai_review:
        name: "Holmes & Watson via GitHub Models üÜì"
        runs-on: ubuntu-latest
        permissions:
            pull-requests: write
            contents: read

        steps:
            - name: üß© Checkout do C√≥digo
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: üîé Coletar informa√ß√µes da PR
              id: pr_info
              run: |
                  echo "Coletando informa√ß√µes da PR #${{ github.event.pull_request.number }}..."

                  # Salvar t√≠tulo
                  echo "TITLE<<EOF" >> $GITHUB_ENV
                  echo "${{ github.event.pull_request.title }}" >> $GITHUB_ENV
                  echo "EOF" >> $GITHUB_ENV

                  # Salvar descri√ß√£o
                  echo "BODY<<EOF" >> $GITHUB_ENV
                  echo "${{ github.event.pull_request.body }}" >> $GITHUB_ENV
                  echo "EOF" >> $GITHUB_ENV
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: üìù Baixar Diff da Pull Request
              id: diff
              run: |
                  echo "Coletando diff da PR..."
                  gh pr diff ${{ github.event.pull_request.number }} > diff.txt

                  # Limitar o tamanho do diff para n√£o exceder limites da API
                  if [ $(wc -c < diff.txt) -gt 30000 ]; then
                    echo "DIFF<<EOF" >> $GITHUB_ENV
                    head -c 30000 diff.txt >> $GITHUB_ENV
                    echo -e "\n\n... (diff truncado por limite de tamanho)" >> $GITHUB_ENV
                    echo "EOF" >> $GITHUB_ENV
                  else
                    echo "DIFF<<EOF" >> $GITHUB_ENV
                    cat diff.txt >> $GITHUB_ENV
                    echo "EOF" >> $GITHUB_ENV
                  fi
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: üß† An√°lise com IA (Sherlock & Watson) - GitHub Models GR√ÅTIS
              id: sherlock_analysis
              run: |
                  echo "Enviando an√°lise para a IA usando GitHub Models (GR√ÅTIS)..."

                  # Criar script Python para gerar o payload JSON
                  cat > create_payload.py << 'PYTHON_EOF'
                  import json
                  import os

                  title = os.environ.get('TITLE', '')
                  body = os.environ.get('BODY', '')
                  diff = os.environ.get('DIFF', '')

                  system_prompt = """Voc√™ √© **Sherlock Holmes**, o famoso detetive do s√©culo XIX, e seu parceiro **John Watson** est√° ao seu lado. Juntos voc√™s recebem pull requests para investigar.

                  Seu trabalho √© analisar cada PR com aten√ß√£o, examinando:
                  - A descri√ß√£o da PR (se est√° bem detalhada, clara, contextualizada);
                  - O diff dos arquivos modificados;
                  - Se est√° faltando testes ou tipos TypeScript;
                  - Se o c√≥digo segue padr√µes modernos e clean code, simplicidade e clareza.

                  Voc√™s devem retornar um relat√≥rio que contenha:
                  1. Uma sauda√ß√£o cordial ("Caro desenvolvedor," ou algo no estilo Sherlock/Watson);
                  2. Aprecia√ß√£o pelo esfor√ßo ("Obrigado por submeter este c√≥digo," etc.);
                  3. Avalia√ß√£o da descri√ß√£o da PR: pontos fortes e onde melhorar;
                  4. An√°lise do c√≥digo modificado: elogios, achados, alertas se faltar tests ou TypeScript;
                  5. Sugest√µes de melhoria concretas, sempre que poss√≠vel;
                  6. Se tudo estiver em ordem, elogio final;
                  7. Se algo estiver faltando (ex: sem testes ou TS), indicar que o PR **n√£o poder√° ser aprovado** at√© que isso seja corrigido.

                  O tom deve ser educado, com leve humor dedutivo, e refer√™ncias ao tema (Sherlock & Watson) s√£o bem-vindas ("Watson notou que‚Ä¶", "Holmes acredita que‚Ä¶"). Use linguagem natural e narrativa envolvente, mas mantenha clareza t√©cnica. Evite respostas excessivamente longas, foque em insights √∫teis para o desenvolvedor."""

                  user_prompt = f"""Aqui est√° a Pull Request para investiga√ß√£o:

                  ## T√çTULO DA PR:
                  {title}

                  ## DESCRI√á√ÉO DA PR:
                  {body if body else '(Sem descri√ß√£o fornecida)'}

                  ## DIFF DA PR:
                  ```diff
                  {diff[:20000]}
                  ```

                  Por favor, realize a investiga√ß√£o completa e forne√ßa o relat√≥rio conforme as instru√ß√µes acima."""

                  payload = {
                      "messages": [
                          {
                              "role": "system",
                              "content": system_prompt
                          },
                          {
                              "role": "user",
                              "content": user_prompt
                          }
                      ],
                      "temperature": 0.7,
                      "max_tokens": 2000
                  }

                  print(json.dumps(payload, ensure_ascii=False, indent=2))
                  PYTHON_EOF

                  # Gerar o payload JSON
                  python3 create_payload.py > payload.json

                  # Fazer a chamada para a API do GitHub Models (GRATUITA!)
                  RESPONSE=$(curl -s https://models.inference.ai.azure.com/chat/completions \
                    -H "Content-Type: application/json" \
                    -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    -d "$(cat payload.json | jq '. + {model: "gpt-4o"}')")

                  # Salvar a resposta completa para debug
                  echo "$RESPONSE" > response.json

                  # Criar script Python para extrair a an√°lise
                  cat > extract_analysis.py << 'PYTHON_EOF'
                  import json
                  import sys

                  try:
                      with open('response.json', 'r') as f:
                          response = json.load(f)
                      
                      if 'error' in response:
                          error_msg = response['error'].get('message', 'Erro desconhecido')
                          print(f"‚ùå Erro da API: {error_msg}")
                          print("\nüí° Dica: Usando GitHub Models (gr√°tis com GitHub Copilot)")
                          print("   Se n√£o funcionar, considere alternativas gratuitas como Gemini.")
                          sys.exit(1)
                      
                      if 'choices' not in response or len(response.get('choices', [])) == 0:
                          print("‚ùå Resposta da API n√£o cont√©m an√°lise")
                          sys.exit(1)
                      
                      analysis = response.get('choices', [{}])[0].get('message', {}).get('content', '')
                      
                      if not analysis:
                          print("‚ùå An√°lise vazia retornada pela API")
                          sys.exit(1)
                      
                      print(analysis)
                      
                  except Exception as e:
                      print(f"‚ùå Erro: {str(e)}")
                      sys.exit(1)
                  PYTHON_EOF

                  # Extrair a an√°lise
                  ANALYSIS=$(python3 extract_analysis.py 2>&1)
                  EXIT_CODE=$?

                  if [ $EXIT_CODE -ne 0 ]; then
                    echo "‚ùå FALHA: $ANALYSIS"
                    echo "Resposta da API:"
                    cat response.json
                    exit 1
                  fi

                  # Salvar an√°lise
                  echo "ANALYSIS<<EOF" >> $GITHUB_ENV
                  echo "$ANALYSIS" >> $GITHUB_ENV
                  echo "EOF" >> $GITHUB_ENV

                  echo "‚úÖ An√°lise conclu√≠da com sucesso usando GitHub Models (GR√ÅTIS)!"
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  TITLE: ${{ env.TITLE }}
                  BODY: ${{ env.BODY }}
                  DIFF: ${{ env.DIFF }}

            - name: üí¨ Comentar na PR
              if: success()
              run: |
                  echo "Publicando an√°lise na PR..."

                  cat > comment.md << 'COMMENT_EOF'
                  ## ÔøΩ Investiga√ß√£o de Sherlock Holmes & Dr. Watson (via GitHub Models)

                  ${{ env.ANALYSIS }}

                  ---
                  *‚ú® An√°lise por **GitHub Models** (Gr√°tis com Copilot!) ‚Ä¢ Modelo: gpt-4o*
                  COMMENT_EOF

                  gh pr comment ${{ github.event.pull_request.number }} --body-file comment.md
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: ‚ö†Ô∏è Tratamento de Erros
              if: failure()
              run: |
                  gh pr comment ${{ github.event.pull_request.number }} --body "‚ö†Ô∏è **Aten√ß√£o**: A an√°lise autom√°tica encontrou um problema. Veja os logs em Actions."
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
