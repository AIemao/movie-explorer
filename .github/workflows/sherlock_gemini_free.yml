name: üî∑ Sherlock (Gemini) - GR√ÅTIS

on:
    pull_request:
        types: [opened, edited, synchronize, reopened]

jobs:
    ai_review:
        name: "Holmes & Watson via Google Gemini üÜì"
        runs-on: ubuntu-latest
        permissions:
            pull-requests: write
            contents: read

        steps:
            - name: üß© Checkout do C√≥digo
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: üîé Coletar informa√ß√µes da PR
              run: |
                  echo "TITLE<<EOF" >> $GITHUB_ENV
                  echo "${{ github.event.pull_request.title }}" >> $GITHUB_ENV
                  echo "EOF" >> $GITHUB_ENV

                  echo "BODY<<EOF" >> $GITHUB_ENV
                  echo "${{ github.event.pull_request.body }}" >> $GITHUB_ENV
                  echo "EOF" >> $GITHUB_ENV

            - name: üìù Baixar Diff da Pull Request
              run: |
                  gh pr diff ${{ github.event.pull_request.number }} > diff.txt

                  if [ $(wc -c < diff.txt) -gt 20000 ]; then
                    echo "DIFF<<EOF" >> $GITHUB_ENV
                    head -c 20000 diff.txt >> $GITHUB_ENV
                    echo -e "\n... (truncado)" >> $GITHUB_ENV
                    echo "EOF" >> $GITHUB_ENV
                  else
                    echo "DIFF<<EOF" >> $GITHUB_ENV
                    cat diff.txt >> $GITHUB_ENV
                    echo "EOF" >> $GITHUB_ENV
                  fi
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: üß† An√°lise com Google Gemini (100% GR√ÅTIS!)
              run: |
                  echo "üÜì Usando Google Gemini API (TOTALMENTE GR√ÅTIS!)"

                  cat > analyze.py << 'PYTHON_EOF'
                  import json
                  import os
                  import urllib.request
                  import urllib.error

                  # Pegar vari√°veis
                  title = os.environ.get('TITLE', '')
                  body = os.environ.get('BODY', '')
                  diff = os.environ.get('DIFF', '')
                  api_key = os.environ.get('GEMINI_API_KEY', '')

                  if not api_key:
                      print("‚ùå Secret GEMINI_API_KEY n√£o configurado!")
                      print("\nüìù Configure assim:")
                      print("1. Acesse: https://aistudio.google.com/app/apikey")
                      print("2. Clique em 'Create API Key' (GR√ÅTIS!)")
                      print("3. Copie a chave")
                      print("4. No GitHub: Settings ‚Üí Secrets ‚Üí New secret")
                      print("5. Nome: GEMINI_API_KEY")
                      print("6. Cole a chave")
                      exit(1)

                  # Montar prompt
                  prompt = f"""Voc√™ √© **Sherlock Holmes**, o famoso detetive, com seu parceiro **Dr. Watson**. 
                  Analisem esta Pull Request:

                  **T√çTULO:** {title}

                  **DESCRI√á√ÉO:** {body if body else '(Sem descri√ß√£o)'}

                  **ALTERA√á√ïES:**
                  ```diff
                  {diff[:15000]}
                  ```

                  Retornem um relat√≥rio estilo Sherlock/Watson com:
                  1. Sauda√ß√£o cordial
                  2. Avalia√ß√£o da descri√ß√£o da PR
                  3. An√°lise do c√≥digo (elogios, alertas sobre testes/TypeScript faltando)
                  4. Sugest√µes concretas
                  5. Aprova√ß√£o ou pedido de corre√ß√µes

                  Tom: Educado, dedutivo, com refer√™ncias a Holmes/Watson. Seja breve mas √∫til."""

                  # Payload para Gemini
                  payload = {
                      "contents": [{
                          "parts": [{"text": prompt}]
                      }],
                      "generationConfig": {
                          "temperature": 0.7,
                          "maxOutputTokens": 2000
                      }
                  }

                  # Chamar API do Gemini
                  url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={api_key}"

                  req = urllib.request.Request(
                      url,
                      data=json.dumps(payload).encode('utf-8'),
                      headers={'Content-Type': 'application/json'}
                  )

                  try:
                      with urllib.request.urlopen(req) as response:
                          result = json.loads(response.read().decode('utf-8'))
                          
                          if 'candidates' in result and len(result['candidates']) > 0:
                              analysis = result['candidates'][0]['content']['parts'][0]['text']
                              print(analysis)
                          else:
                              print("‚ùå Resposta inesperada da API Gemini")
                              print(json.dumps(result, indent=2))
                              exit(1)
                              
                  except urllib.error.HTTPError as e:
                      error_body = e.read().decode('utf-8')
                      print(f"‚ùå Erro HTTP {e.code}: {error_body}")
                      exit(1)
                  except Exception as e:
                      print(f"‚ùå Erro: {str(e)}")
                      exit(1)
                  PYTHON_EOF

                  ANALYSIS=$(python3 analyze.py)

                  if [ $? -ne 0 ]; then
                    echo "$ANALYSIS"
                    exit 1
                  fi

                  echo "ANALYSIS<<EOF" >> $GITHUB_ENV
                  echo "$ANALYSIS" >> $GITHUB_ENV
                  echo "EOF" >> $GITHUB_ENV

                  echo "‚úÖ An√°lise conclu√≠da com Google Gemini (GR√ÅTIS)!"
              env:
                  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
                  TITLE: ${{ env.TITLE }}
                  BODY: ${{ env.BODY }}
                  DIFF: ${{ env.DIFF }}

            - name: üí¨ Comentar na PR
              if: success()
              run: |
                  cat > comment.md << 'COMMENT_EOF'
                  ## ÔøΩ Investiga√ß√£o de Sherlock Holmes & Dr. Watson (via Google Gemini)

                  ${{ env.ANALYSIS }}

                  ---
                  *‚ú® An√°lise por **Google Gemini** (100% Gr√°tis!) ‚Ä¢ Modelo: gemini-1.5-flash*
                  COMMENT_EOF

                  gh pr comment ${{ github.event.pull_request.number }} --body-file comment.md
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: ‚ö†Ô∏è Erro
              if: failure()
              run: |
                  gh pr comment ${{ github.event.pull_request.number }} --body "‚ö†Ô∏è An√°lise falhou. Veja logs em Actions."
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
