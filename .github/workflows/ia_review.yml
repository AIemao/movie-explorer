name: Sherlock Holmes PR Reviewer üïµÔ∏è‚Äç‚ôÇÔ∏è

on:
    pull_request:
        types: [opened, edited, synchronize, reopened]

jobs:
    ai_review:
        name: "Sherlock Holmes & Dr. Watson Investigam"
        runs-on: ubuntu-latest
        permissions:
            pull-requests: write
            contents: read

        steps:
            - name: üß© Checkout do C√≥digo
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: üîé Coletar informa√ß√µes da PR
              id: pr_info
              run: |
                  echo "Coletando informa√ß√µes da PR #${{ github.event.pull_request.number }}..."

                  # Salvar t√≠tulo
                  echo "TITLE<<EOF" >> $GITHUB_ENV
                  echo "${{ github.event.pull_request.title }}" >> $GITHUB_ENV
                  echo "EOF" >> $GITHUB_ENV

                  # Salvar descri√ß√£o
                  echo "BODY<<EOF" >> $GITHUB_ENV
                  echo "${{ github.event.pull_request.body }}" >> $GITHUB_ENV
                  echo "EOF" >> $GITHUB_ENV
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: üìù Baixar Diff da Pull Request
              id: diff
              run: |
                  echo "Coletando diff da PR..."
                  gh pr diff ${{ github.event.pull_request.number }} > diff.txt

                  # Limitar o tamanho do diff para n√£o exceder limites da API
                  if [ $(wc -c < diff.txt) -gt 50000 ]; then
                    echo "DIFF<<EOF" >> $GITHUB_ENV
                    head -c 50000 diff.txt >> $GITHUB_ENV
                    echo -e "\n\n... (diff truncado por limite de tamanho)" >> $GITHUB_ENV
                    echo "EOF" >> $GITHUB_ENV
                  else
                    echo "DIFF<<EOF" >> $GITHUB_ENV
                    cat diff.txt >> $GITHUB_ENV
                    echo "EOF" >> $GITHUB_ENV
                  fi
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: üß† An√°lise com IA (Sherlock & Watson)
              id: sherlock_analysis
              run: |
                  echo "Enviando an√°lise para a IA..."

                  # Criar o prompt completo
                  cat > prompt.json << 'PROMPT_EOF'
                  {
                    "model": "gpt-4o",
                    "messages": [
                      {
                        "role": "system",
                        "content": "Voc√™ √© **Sherlock Holmes**, o famoso detetive do s√©culo XIX, e seu parceiro **John Watson** est√° ao seu lado. Juntos voc√™s recebem pull requests para investigar.\n\nSeu trabalho √© analisar cada PR com aten√ß√£o, examinando:\n- A descri√ß√£o da PR (se est√° bem detalhada, clara, contextualizada);\n- O diff dos arquivos modificados;\n- Se est√° faltando testes ou tipos TypeScript;\n- Se o c√≥digo segue padr√µes modernos e clean code, simplicidade e clareza.\n\nVoc√™s devem retornar um relat√≥rio que contenha:\n1. Uma sauda√ß√£o cordial (\"Caro desenvolvedor,\" ou algo no estilo Sherlock/Watson);\n2. Aprecia√ß√£o pelo esfor√ßo (\"Obrigado por submeter este c√≥digo,\" etc.);\n3. Avalia√ß√£o da descri√ß√£o da PR: pontos fortes e onde melhorar;\n4. An√°lise do c√≥digo modificado: elogios, achados, alertas se faltar tests ou TypeScript;\n5. Sugest√µes de melhoria concretas, sempre que poss√≠vel;\n6. Se tudo estiver em ordem, elogio final;\n7. Se algo estiver faltando (ex: sem testes ou TS), indicar que o PR **n√£o poder√° ser aprovado** at√© que isso seja corrigido.\n\nO tom deve ser educado, com leve humor dedutivo, e refer√™ncias ao tema (Sherlock & Watson) s√£o bem-vindas (\"Watson notou que‚Ä¶\", \"Holmes acredita que‚Ä¶\"). Use linguagem natural e narrativa envolvente, mas mantenha clareza t√©cnica. Evite respostas excessivamente longas, foque em insights √∫teis para o desenvolvedor."
                      },
                      {
                        "role": "user",
                        "content": "Aqui est√° a Pull Request para investiga√ß√£o:\n\n## T√çTULO DA PR:\n$TITLE\n\n## DESCRI√á√ÉO DA PR:\n$BODY\n\n## DIFF DA PR:\n```diff\n$DIFF\n```\n\nPor favor, realize a investiga√ß√£o completa e forne√ßa o relat√≥rio conforme as instru√ß√µes acima."
                      }
                    ],
                    "temperature": 0.7,
                    "max_tokens": 2000
                  }
                  PROMPT_EOF

                  # Substituir vari√°veis no JSON
                  export TITLE="${{ env.TITLE }}"
                  export BODY="${{ env.BODY }}"
                  export DIFF="${{ env.DIFF }}"

                  # Escapar e inserir as vari√°veis no JSON
                  jq --arg title "$TITLE" \
                     --arg body "$BODY" \
                     --arg diff "$DIFF" \
                     '.messages[1].content = "Aqui est√° a Pull Request para investiga√ß√£o:\n\n## T√çTULO DA PR:\n" + $title + "\n\n## DESCRI√á√ÉO DA PR:\n" + $body + "\n\n## DIFF DA PR:\n```diff\n" + $diff + "\n```\n\nPor favor, realize a investiga√ß√£o completa e forne√ßa o relat√≥rio conforme as instru√ß√µes acima."' \
                     prompt.json > final_prompt.json

                  # Fazer a chamada para a API da OpenAI
                  RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
                    -H "Content-Type: application/json" \
                    -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
                    -d @final_prompt.json)

                  # Extrair a resposta
                  echo "$RESPONSE" > response.json
                  ANALYSIS=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // "Erro ao processar an√°lise"')

                  # Salvar an√°lise para o pr√≥ximo step
                  echo "ANALYSIS<<EOF" >> $GITHUB_ENV
                  echo "$ANALYSIS" >> $GITHUB_ENV
                  echo "EOF" >> $GITHUB_ENV

                  echo "An√°lise conclu√≠da!"
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: üí¨ Comentar na PR
              if: success()
              run: |
                  echo "Publicando an√°lise na PR..."

                  # Criar coment√°rio formatado
                  cat > comment.md << 'COMMENT_EOF'
                  ## üïµÔ∏è‚Äç‚ôÇÔ∏è Investiga√ß√£o de Sherlock Holmes & Dr. Watson

                  ${{ env.ANALYSIS }}

                  ---
                  *An√°lise autom√°tica gerada por IA ‚Ä¢ Sherlock Holmes PR Reviewer*
                  COMMENT_EOF

                  # Postar coment√°rio
                  gh pr comment ${{ github.event.pull_request.number }} --body-file comment.md
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: ‚ö†Ô∏è Tratamento de Erros
              if: failure()
              run: |
                  echo "Houve um erro durante a an√°lise. Verifique os logs acima."
                  gh pr comment ${{ github.event.pull_request.number }} --body "‚ö†Ô∏è **Aten√ß√£o**: A an√°lise autom√°tica de Sherlock Holmes encontrou um problema t√©cnico. Por favor, revise manualmente esta PR."
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
