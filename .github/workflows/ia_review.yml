name: Sherlock Holmes PR Reviewer üïµÔ∏è‚Äç‚ôÇÔ∏è

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]

jobs:
  ai_review:
    name: "Sherlock Holmes & Dr. Watson Investigam"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: üß© Checkout do C√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ÔøΩ Verificar Secret da OpenAI
        run: |
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "‚ùå ERRO: Secret OPENAI_API_KEY n√£o est√° configurado!"
            echo ""
            echo "Para configurar:"
            echo "1. V√° em Settings ‚Üí Secrets and variables ‚Üí Actions"
            echo "2. Clique em 'New repository secret'"
            echo "3. Nome: OPENAI_API_KEY"
            echo "4. Value: sua chave da OpenAI (come√ßa com sk-)"
            echo ""
            echo "Obtenha sua chave em: https://platform.openai.com/api-keys"
            exit 1
          else
            echo "‚úÖ Secret OPENAI_API_KEY encontrado!"
          fi

      - name: ÔøΩüîé Coletar informa√ß√µes da PR
        id: pr_info
        run: |
          echo "Coletando informa√ß√µes da PR #${{ github.event.pull_request.number }}..."

          # Salvar t√≠tulo
          echo "TITLE<<EOF" >> $GITHUB_ENV
          echo "${{ github.event.pull_request.title }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Salvar descri√ß√£o
          echo "BODY<<EOF" >> $GITHUB_ENV
          echo "${{ github.event.pull_request.body }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìù Baixar Diff da Pull Request
        id: diff
        run: |
          echo "Coletando diff da PR..."
          gh pr diff ${{ github.event.pull_request.number }} > diff.txt

          # Limitar o tamanho do diff para n√£o exceder limites da API
          if [ $(wc -c < diff.txt) -gt 50000 ]; then
            echo "DIFF<<EOF" >> $GITHUB_ENV
            head -c 50000 diff.txt >> $GITHUB_ENV
            echo -e "\n\n... (diff truncado por limite de tamanho)" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "DIFF<<EOF" >> $GITHUB_ENV
            cat diff.txt >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üß† An√°lise com IA (Sherlock & Watson)
        id: sherlock_analysis
        run: |
          echo "Enviando an√°lise para a IA..."

          # Criar script Python para gerar o payload JSON
          cat > create_payload.py << 'PYTHON_EOF'
          import json
          import os
          import sys

          title = os.environ.get('TITLE', '')
          body = os.environ.get('BODY', '')
          diff = os.environ.get('DIFF', '')

          system_prompt = """Voc√™ √© **Sherlock Holmes**, o famoso detetive do s√©culo XIX, e seu parceiro **John Watson** est√° ao seu lado. Juntos voc√™s recebem pull requests para investigar.

          Seu trabalho √© analisar cada PR com aten√ß√£o, examinando:
          - A descri√ß√£o da PR (se est√° bem detalhada, clara, contextualizada);
          - O diff dos arquivos modificados;
          - Se est√° faltando testes ou tipos TypeScript;
          - Se o c√≥digo segue padr√µes modernos e clean code, simplicidade e clareza.

          Voc√™s devem retornar um relat√≥rio que contenha:
          1. Uma sauda√ß√£o cordial ("Caro desenvolvedor," ou algo no estilo Sherlock/Watson);
          2. Aprecia√ß√£o pelo esfor√ßo ("Obrigado por submeter este c√≥digo," etc.);
          3. Avalia√ß√£o da descri√ß√£o da PR: pontos fortes e onde melhorar;
          4. An√°lise do c√≥digo modificado: elogios, achados, alertas se faltar tests ou TypeScript;
          5. Sugest√µes de melhoria concretas, sempre que poss√≠vel;
          6. Se tudo estiver em ordem, elogio final;
          7. Se algo estiver faltando (ex: sem testes ou TS), indicar que o PR **n√£o poder√° ser aprovado** at√© que isso seja corrigido.

          O tom deve ser educado, com leve humor dedutivo, e refer√™ncias ao tema (Sherlock & Watson) s√£o bem-vindas ("Watson notou que‚Ä¶", "Holmes acredita que‚Ä¶"). Use linguagem natural e narrativa envolvente, mas mantenha clareza t√©cnica. Evite respostas excessivamente longas, foque em insights √∫teis para o desenvolvedor."""

          user_prompt = f"""Aqui est√° a Pull Request para investiga√ß√£o:

          ## T√çTULO DA PR:
          {title}

          ## DESCRI√á√ÉO DA PR:
          {body if body else '(Sem descri√ß√£o fornecida)'}

          ## DIFF DA PR:
          ```diff
          {diff}
          ```

          Por favor, realize a investiga√ß√£o completa e forne√ßa o relat√≥rio conforme as instru√ß√µes acima."""

          payload = {
              "model": "gpt-4o",
              "messages": [
                  {
                      "role": "system",
                      "content": system_prompt
                  },
                  {
                      "role": "user",
                      "content": user_prompt
                  }
              ],
              "temperature": 0.7,
              "max_tokens": 2000
          }

          print(json.dumps(payload, ensure_ascii=False, indent=2))
          PYTHON_EOF

          # Gerar o payload JSON
          python3 create_payload.py > payload.json

          # Fazer a chamada para a API da OpenAI
          RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d @payload.json)

          # Salvar a resposta completa para debug
          echo "$RESPONSE" > response.json

          # Criar script Python para extrair a an√°lise
          cat > extract_analysis.py << 'PYTHON_EOF'
          import json
          import sys

          try:
              with open('response.json', 'r') as f:
                  response = json.load(f)
              
              # Debug: mostrar resposta completa
              print("=== DEBUG: Resposta da API ===", file=sys.stderr)
              print(json.dumps(response, indent=2), file=sys.stderr)
              print("=" * 50, file=sys.stderr)
              
              if 'error' in response:
                  error_msg = response['error'].get('message', 'Erro desconhecido')
                  error_type = response['error'].get('type', 'unknown')
                  print(f"‚ùå Erro da API OpenAI ({error_type}): {error_msg}")
                  
                  # Mensagens de ajuda espec√≠ficas
                  if 'invalid_api_key' in error_type or 'authentication' in error_msg.lower():
                      print("\nüí° Dica: Verifique se o secret OPENAI_API_KEY est√° configurado corretamente.")
                      print("   A chave deve come√ßar com 'sk-' e estar ativa.")
                  elif 'insufficient_quota' in error_type or 'quota' in error_msg.lower():
                      print("\nüí° Dica: Sua conta OpenAI n√£o tem cr√©ditos suficientes.")
                      print("   Adicione cr√©ditos em: https://platform.openai.com/account/billing")
                  elif 'model_not_found' in error_type:
                      print("\nüí° Dica: O modelo 'gpt-4o' pode n√£o estar dispon√≠vel para sua conta.")
                      print("   Tente usar 'gpt-4o-mini' ou 'gpt-3.5-turbo'.")
                  
                  sys.exit(1)
              
              if 'choices' not in response or len(response.get('choices', [])) == 0:
                  print("‚ùå Resposta da API n√£o cont√©m an√°lise")
                  print(f"Resposta recebida: {json.dumps(response, indent=2)}")
                  sys.exit(1)
              
              analysis = response.get('choices', [{}])[0].get('message', {}).get('content', '')
              
              if not analysis:
                  print("‚ùå An√°lise vazia retornada pela API")
                  sys.exit(1)
              
              print(analysis)
              
          except json.JSONDecodeError as e:
              print(f"‚ùå Erro ao decodificar JSON: {str(e)}")
              print("\nüí° Dica: A resposta da API n√£o est√° em formato JSON v√°lido.")
              print("Isso geralmente indica um problema de conex√£o ou erro no servidor da OpenAI.")
              with open('response.json', 'r') as f:
                  print(f"\nResposta raw: {f.read()[:500]}...")
              sys.exit(1)
          except FileNotFoundError:
              print("‚ùå Arquivo response.json n√£o encontrado")
              sys.exit(1)
          except Exception as e:
              print(f"‚ùå Erro ao processar resposta: {str(e)}")
              import traceback
              traceback.print_exc()
              sys.exit(1)
          PYTHON_EOF

          # Extrair a an√°lise
          ANALYSIS=$(python3 extract_analysis.py 2>&1)
          EXIT_CODE=$?

          # Verificar se houve erro
          if [ $EXIT_CODE -ne 0 ]; then
            echo ""
            echo "=========================================="
            echo "‚ùå FALHA NA AN√ÅLISE DA IA"
            echo "=========================================="
            echo ""
            echo "$ANALYSIS"
            echo ""
            echo "=========================================="
            echo "üìã Resposta completa da API:"
            echo "=========================================="
            cat response.json
            exit 1
          fi

          # Salvar an√°lise para o pr√≥ximo step
          echo "ANALYSIS<<EOF" >> $GITHUB_ENV
          echo "$ANALYSIS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "‚úÖ An√°lise conclu√≠da com sucesso!"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TITLE: ${{ env.TITLE }}
          BODY: ${{ env.BODY }}
          DIFF: ${{ env.DIFF }}

      - name: üí¨ Comentar na PR
        if: success()
        run: |
          echo "Publicando an√°lise na PR..."

          # Criar coment√°rio formatado
          cat > comment.md << 'COMMENT_EOF'
          ## üïµÔ∏è‚Äç‚ôÇÔ∏è Investiga√ß√£o de Sherlock Holmes & Dr. Watson

          ${{ env.ANALYSIS }}

          ---
          *An√°lise autom√°tica gerada por IA ‚Ä¢ Sherlock Holmes PR Reviewer*
          COMMENT_EOF

          # Postar coment√°rio
          gh pr comment ${{ github.event.pull_request.number }} --body-file comment.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚ö†Ô∏è Tratamento de Erros
        if: failure()
        run: |
          echo "Houve um erro durante a an√°lise. Verifique os logs acima."
          gh pr comment ${{ github.event.pull_request.number }} --body "‚ö†Ô∏è **Aten√ß√£o**: A an√°lise autom√°tica de Sherlock Holmes encontrou um problema t√©cnico. Por favor, revise manualmente esta PR."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
